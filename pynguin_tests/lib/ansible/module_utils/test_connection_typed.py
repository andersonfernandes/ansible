# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import platform as module_0
import connection_typed as module_1
import re as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    var_0 = module_0.python_build()
    module_1.recv_data(var_0)


def test_case_1():
    none_type_0 = None
    connection_error_0 = module_1.ConnectionError(none_type_0)
    assert (
        f"{type(connection_error_0).__module__}.{type(connection_error_0).__qualname__}"
        == "connection_typed.ConnectionError"
    )


def test_case_2():
    str_0 = "*QMW~UgE r"
    connection_0 = module_1.Connection(str_0)
    assert (
        f"{type(connection_0).__module__}.{type(connection_0).__qualname__}"
        == "connection_typed.Connection"
    )
    assert connection_0.socket_path == "*QMW~UgE r"


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    module_1.write_to_file_descriptor(bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    var_0 = module_0.uname()
    module_1.send_data(var_0, var_0)


def test_case_5():
    str_0 = "j[QNZSK1&\\"
    mutable_mapping_0 = module_1.request_builder(str_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "/sys/devices/virtual/dmi/id/chassis_version"
    connection_0 = module_1.Connection(str_0)
    assert (
        f"{type(connection_0).__module__}.{type(connection_0).__qualname__}"
        == "connection_typed.Connection"
    )
    assert connection_0.socket_path == "/sys/devices/virtual/dmi/id/chassis_version"
    module_1.recv_data(connection_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    var_0 = module_0.system()
    connection_0 = module_1.Connection(var_0)
    assert (
        f"{type(connection_0).__module__}.{type(connection_0).__qualname__}"
        == "connection_typed.Connection"
    )
    assert connection_0.socket_path == "Linux"
    module_1.recv_data(connection_0)


def test_case_8():
    var_0 = module_0.win32_edition()
    with pytest.raises(AssertionError):
        module_1.Connection(var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "*QMW~UgE r"
    connection_0 = module_1.Connection(str_0)
    assert (
        f"{type(connection_0).__module__}.{type(connection_0).__qualname__}"
        == "connection_typed.Connection"
    )
    assert connection_0.socket_path == "*QMW~UgE r"
    dict_0 = {connection_0: str_0}
    connection_0.__getattr__(dict_0)


def test_case_10():
    str_0 = "/sys/devices/virtual/dmi/id/chassis_version"
    connection_0 = module_1.Connection(str_0)
    assert (
        f"{type(connection_0).__module__}.{type(connection_0).__qualname__}"
        == "connection_typed.Connection"
    )
    assert connection_0.socket_path == "/sys/devices/virtual/dmi/id/chassis_version"
    with pytest.raises(module_1.ConnectionError):
        connection_0.__rpc__(connection_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    var_0 = module_2.RegexFlag.LOCALE
    connection_0 = module_1.Connection(var_0)
    assert (
        f"{type(connection_0).__module__}.{type(connection_0).__qualname__}"
        == "connection_typed.Connection"
    )
    assert connection_0.socket_path == module_2.RegexFlag.LOCALE
    module_1.recv_data(connection_0)
